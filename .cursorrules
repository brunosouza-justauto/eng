# ENG App Project Rules

## Critical Implementation Paths

### Authentication
- Uses Supabase passwordless authentication (magic links)
- Redux store manages auth state (authSlice.ts)
- Protected routes check auth status via selectors

### UI/UX
- Modern sidebar navigation pattern with mobile responsiveness
- Uses Tailwind CSS v3.3.2 (stable version)
- Dark/light mode toggle with persistent preference
- Meal planning components use dark-themed cards with clear content separation
- Nutrition data uses consistent color coding (protein=red, carbs=yellow, fat=blue)

### Navigation
- URL parameters are used to maintain context between related screens
- Query parameters preserve user selections when navigating between components
- Dashboard widgets link to detailed views with preserved context

## Tailwind CSS Configuration

- **Version**: Using stable Tailwind CSS v3.3.2 (NOT v4.x alpha)
- **PostCSS Config**: Uses standard `tailwindcss` plugin in postcss.config.js
- **Custom Components**: Defined in index.css using `@layer components`
- **Dark Mode**: Implemented with Tailwind's class strategy (`darkMode: 'class'`)
- **Theme**: Uses Tailwind's indigo color palette as primary color
- **Common Patterns**: 
  - `pr-4` for table column spacing (not `pr-8` which is too wide)
  - Card headers use `p-4 bg-gray-800` for consistent styling
  - Macro indicators use `text-sm text-gray-400` for secondary information

## Project Structure

- React 18 + Vite
- TypeScript throughout
- Redux + Redux Toolkit for state management
- React Router v7 for routing
- Supabase for backend services

## Common Patterns

- Use React functional components with TypeScript interfaces
- Redux selectors for accessing store state
- Consistent styling with Tailwind CSS classes
- Form handling with React Hook Form
- Data validation with Zod schema
- Nutrition components handle different day types (Rest, Light, Moderate, Heavy)
- Table layouts use consistent spacing with proper column alignment
- URL parameters maintain context across navigation boundaries
- Macronutrient displays follow P/C/F order with consistent color coding

## Known Challenges

- Responsive design needs attention on smallest screen sizes
- Admin CMS data integration is pending
- Some column spacing in tables requires fine-tuning for optimal readability
- Daily nutrition calculations need to account for unlogged days

## Database Tables

### Nutrition & Meal Logging
- Meal logs are stored in the `meal_logs` table (NOT `logged_meals`)
- Meal logging queries should filter by `user_id`, `log_date`, and `is_extra_meal` flag
- Nutrition plans are stored in `nutrition_plans` table with nested meals and food items

### Notification System
- Notifications are stored in the `notifications` table with recipient_id, sender_id, and metadata
- Database triggers automatically generate notifications for key events
- Step goal notifications use `step_entries` and `step_goals` tables to detect achievements
- Notification types are defined in the `NotificationType` TypeScript enum
- Notification handlers map to specific navigation paths based on notification type
- Workout notifications dynamically detect completion based on table structure

## UI/UX Patterns

### Meal Logging Components
- Always provide clear visual feedback for logged meals (checkmark icon)
- Position action buttons at the bottom of meal cards as full-width buttons
- Use explicit text labels with icons for action buttons
- Follow semantic color coding: green for logging actions, red for removal actions
- Display loading spinners during async operations
- Maintain consistent nutritional information display order: P/C/F
- Use ID anchors (e.g., `id="todays-meals"`) for scroll navigation from other components

This file serves as a learning journal and will be updated as new patterns and decisions emerge. 